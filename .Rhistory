updater
install.packages("updater")
updater()
library(updater)
install.packages("installr")
installr::install.R
installr::install.r()
install.R()
library(installr)
install.R()
library(readxl)
library(tidyr)
library(tidyr)
library(zoo)
library(zoo)
library(dplyr)
library(stargazer)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core <- read.csv("./Statement_SPX_matched.csv.xls")
Core <- read.csv("./Statement_SPX_matched.csv")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core <- read.csv("./Statement_SPX_matched.csv")
Core <- read.csv("./Statement_SPX_matched.csv")
view(Core)
Core
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures
table(Fed_Futures)
library(readxl)
library(tidyr)
library(zoo)
library(dplyr)
library(stargazer)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
Core<- Core[,-5]
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
Core<- Core[,-5]
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures<- Fed_Futures %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
Fed_Futures<-na.locf(Fed_Futures, fromLast = FALSE)
Fed_Futures<- Fed_Futures[Fed_Futures$Date %in% FilterDates,]
Core
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures<- Fed_Futures %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
Fed_Futures<-na.locf(Fed_Futures, fromLast = FALSE)
Fed_Futures<- Fed_Futures[Fed_Futures$Date %in% FilterDates,]
IR <- read.csv("./DFF.csv")
IR$Date <- as.Date(IR$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
Core$return <- SPX_return$Daily_Return
SPX_DE <- read_excel("./SPX_DE.xlsx")
SPX_DE$Date <- as.Date(SPX_DE$Date, format="%Y-%m-%d %H:%M:%S")
SPX_DE<- SPX_DE %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_DE<-na.locf(SPX_DE, fromLast = FALSE)
SPX_DE<- SPX_DE[SPX_DE$Date %in% FilterDates,]
##################################################################################
SPX_price <- read.csv("./HistoricalPrices.csv", header = TRUE)
SPX_price <- SPX_price[,c(1,5)]# choosing only the closing price each day
SPX_price$Date<-as.Date(SPX_price$Date, format = "%m/%d/%y")# converting the date column
SPX_price<-na.locf(SPX_price, fromLast = FALSE)
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
days_in_year <- 252
# Calculate rolling 3-year average return
SPX_return$Rolling_3Y_Avg_Return <- rollapply(SPX_return$Daily_Return,
width = 3 * days_in_year,
FUN = mean,
by.column = TRUE,
fill = NA,
align = 'right')
SPX_price
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
days_in_year <- 252
# Calculate rolling 3-year average return
SPX_return$Rolling_3Y_Avg_Return <- rollapply(SPX_return$Daily_Return,
width = 3 * days_in_year,
FUN = mean,
by.column = TRUE,
fill = NA,
align = 'right')
SPX_return$abnormal_returns<-SPX_return$Daily_Return-SPX_return$Rolling_3Y_Avg_Return
SPX_return$lagged_return<- lag(SPX_return$Daily_Return)
SPX_return<- SPX_return %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_return<- SPX_return[SPX_return$Date %in% FilterDates,]
library(lmtest)
Core$return <- SPX_return$Daily_Return
Core$lagged_return <- as.numeric(SPX_return$lagged_return)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$IR<- IR$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
Core$IR<- IR$DFF
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
Core$IR<- IR$DFF
IR_Lead$DFF<- lead(IR_Lead$DFF)
Core$IR<- IR_LEAD$DFF
Core$IR<- IR_Lead$DFF
Core$IR<- IR_Lead$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
simple_tone <- lm(SPX_price~Tone)
simple_tone <- lm(SPX_price~Core$Tone)
simple_tone <- lm(SPX_return~Core$Tone)
Core
FilterDates<-c(Core$Date)
Core<- Core[,-5]
SPX_return
SPX_return$abnormal_returns<-SPX_return$Daily_Return-SPX_return$Rolling_3Y_Avg_Return
SPX_return$lagged_return<- lag(SPX_return$Daily_Return)
SPX_return<- SPX_return %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_return<- SPX_return[SPX_return$Date %in% FilterDates,]
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
Core$return <- SPX_return$Daily_Return
Core$lagged_return <- as.numeric(SPX_return$lagged_return)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$IR<- IR_Lead$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
simple_tone <- lm~(Core$abnormal_return ~ Core$Tone)
simple_tone
simple_tone <- lm(Core$abnormal_return ~ Core$Tone)
simple_tone
summary(simple_tone)
simple_tone <- lm(Core$return ~ Core$Tone)
summary(simple_tone)
simple_unc <- summary(lm(Core$return~Core$Tone))
simple_unc
simple_unc <- summary(lm(Core$return~Core$Unc))
simple_unc
simple_Con <- summary(lm(Core$return~Core$Con))
simple_Con
interactions_tone<-lm(abnormal_return~Tone*debt_equity + IR + lagged_return + Surprise*debt_equity + debt_equity, data=Core)
interactions_unc<-lm(abnormal_return~Unc*debt_equity + IR + lagged_return + Surprise*debt_equity + debt_equity, data=Core)
interactions_con<-lm(abnormal_return~Con*debt_equity + IR + lagged_return + Surprise*debt_equity + debt_equity, data=Core)
stargazer(interactions_tone, interactions_unc, interactions_con,
column.labels = c("Tone", "Unc", "Con"), header = F)
View(SPX_DE)
stargazer(simple_Con, simple_tone, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
simple_tone <- summary(lm(Core$return ~ Core$Tone))
simple_unc <- summary(lm(Core$return~Core$Unc))
simple_Con <- summary(lm(Core$return~Core$Con))
stargazer(simple_Con, simple_tone, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
stargazer(simple_Con, simple_tone, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
simple_tone <- summary(lm(Core$return ~ Core$Tone))
simple_unc <- summary(lm(Core$return~Core$Unc))
simple_con <- summary(lm(Core$return~Core$Con))
stargazer(simple_tone, simple_tone, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
stargazer(simple_tone, simple_tone, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = FALSE)
simple_tone <- summary(lm(return ~ Tone, Data=Core))
colnames(Core)
simple_tone <- summary(lm(abnormal_return ~ Tone, Data=Core))
Core
knitr::opts_chunk$set(include = FALSE)
library(readxl)
library(tidyr)
library(zoo)
library(dplyr)
library(stargazer)
library(lmtest)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
Core<- Core[,-5]
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures<- Fed_Futures %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
Fed_Futures<-na.locf(Fed_Futures, fromLast = FALSE)
Fed_Futures<- Fed_Futures[Fed_Futures$Date %in% FilterDates,]
#####################################################################################
IR <- read.csv("./DFF.csv")
IR$Date <- as.Date(IR$DATE, format = "%Y-%m-%d") # converting the date column
IR<- IR %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR <-na.locf(IR, fromLast = FALSE)
IR <- IR[IR$Date %in% FilterDates,][,-1]
#########################################################################
SPX_DE <- read_excel("./SPX_DE.xlsx")
SPX_DE$Date <- as.Date(SPX_DE$Date, format="%Y-%m-%d %H:%M:%S")
SPX_DE<- SPX_DE %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_DE<-na.locf(SPX_DE, fromLast = FALSE)
SPX_DE<- SPX_DE[SPX_DE$Date %in% FilterDates,]
##################################################################################
SPX_price <- read.csv("./HistoricalPrices.csv", header = TRUE)
SPX_price <- SPX_price[,c(1,5)]# choosing only the closing price each day
SPX_price$Date<-as.Date(SPX_price$Date, format = "%m/%d/%y")# converting the date column
SPX_price<-na.locf(SPX_price, fromLast = FALSE)
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
days_in_year <- 252
# Calculate rolling 3-year average return
SPX_return$Rolling_3Y_Avg_Return <- rollapply(SPX_return$Daily_Return,
width = 3 * days_in_year,
FUN = mean,
by.column = TRUE,
fill = NA,
align = 'right')
SPX_return$abnormal_returns<-SPX_return$Daily_Return-SPX_return$Rolling_3Y_Avg_Return
SPX_return$lagged_return<- lag(SPX_return$Daily_Return)
SPX_return<- SPX_return %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_return<- SPX_return[SPX_return$Date %in% FilterDates,]
######################################## SURPRISES ###########################
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
######################################################################################
########################### CONSTRUCTION OF CORE DATASET FOR REGRESSIONS #############
######################################################################################
Core$return <- SPX_return$Daily_Return
Core$lagged_return <- as.numeric(SPX_return$lagged_return)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$IR<- IR_Lead$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
simple_tone <- lm(abnormal_return, data = Core)
simple_tone <- lm(abnormal_return ~ Tone, Data = Core)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$return <- SPX_return$Daily_Return
knitr::opts_chunk$set(include = FALSE)
library(readxl)
library(tidyr)
library(zoo)
library(dplyr)
library(stargazer)
library(lmtest)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
Core<- Core[,-5]
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures<- Fed_Futures %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
Fed_Futures<-na.locf(Fed_Futures, fromLast = FALSE)
Fed_Futures<- Fed_Futures[Fed_Futures$Date %in% FilterDates,]
#####################################################################################
IR <- read.csv("./DFF.csv")
IR$Date <- as.Date(IR$DATE, format = "%Y-%m-%d") # converting the date column
IR<- IR %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR <-na.locf(IR, fromLast = FALSE)
IR <- IR[IR$Date %in% FilterDates,][,-1]
#########################################################################
SPX_DE <- read_excel("./SPX_DE.xlsx")
SPX_DE$Date <- as.Date(SPX_DE$Date, format="%Y-%m-%d %H:%M:%S")
SPX_DE<- SPX_DE %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_DE<-na.locf(SPX_DE, fromLast = FALSE)
SPX_DE<- SPX_DE[SPX_DE$Date %in% FilterDates,]
##################################################################################
SPX_price <- read.csv("./HistoricalPrices.csv", header = TRUE)
SPX_price <- SPX_price[,c(1,5)]# choosing only the closing price each day
SPX_price$Date<-as.Date(SPX_price$Date, format = "%m/%d/%y")# converting the date column
SPX_price<-na.locf(SPX_price, fromLast = FALSE)
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
days_in_year <- 252
# Calculate rolling 3-year average return
SPX_return$Rolling_3Y_Avg_Return <- rollapply(SPX_return$Daily_Return,
width = 3 * days_in_year,
FUN = mean,
by.column = TRUE,
fill = NA,
align = 'right')
SPX_return$abnormal_returns<-SPX_return$Daily_Return-SPX_return$Rolling_3Y_Avg_Return
SPX_return$lagged_return<- lag(SPX_return$Daily_Return)
SPX_return<- SPX_return %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_return<- SPX_return[SPX_return$Date %in% FilterDates,]
######################################## SURPRISES ###########################
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
######################################################################################
########################### CONSTRUCTION OF CORE DATASET FOR REGRESSIONS #############
######################################################################################
Core$return <- SPX_return$Daily_Return
Core$lagged_return <- as.numeric(SPX_return$lagged_return)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$IR<- IR_Lead$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path<-dirname(rstudioapi::getSourceEditorContext()$path)
Core <- read.csv("./Statement_SPX_matched.csv")
Core$Date <- as.Date(Core$Date, format = "%d/%m/%Y") # converting the date column
FilterDates<-c(Core$Date)
Core<- Core[,-5]
#################################################################################
Fed_Futures <- read_excel("./FED_FORWARDS.xlsx")
Fed_Futures$Date <- as.Date(Fed_Futures$Date, format="%Y-%m-%d %H:%M:%S")
Fed_Futures<- Fed_Futures %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
Fed_Futures<-na.locf(Fed_Futures, fromLast = FALSE)
Fed_Futures<- Fed_Futures[Fed_Futures$Date %in% FilterDates,]
#####################################################################################
IR <- read.csv("./DFF.csv")
IR$Date <- as.Date(IR$DATE, format = "%Y-%m-%d") # converting the date column
IR<- IR %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR <-na.locf(IR, fromLast = FALSE)
IR <- IR[IR$Date %in% FilterDates,][,-1]
#########################################################################
SPX_DE <- read_excel("./SPX_DE.xlsx")
SPX_DE$Date <- as.Date(SPX_DE$Date, format="%Y-%m-%d %H:%M:%S")
SPX_DE<- SPX_DE %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_DE<-na.locf(SPX_DE, fromLast = FALSE)
SPX_DE<- SPX_DE[SPX_DE$Date %in% FilterDates,]
##################################################################################
SPX_price <- read.csv("./HistoricalPrices.csv", header = TRUE)
SPX_price <- SPX_price[,c(1,5)]# choosing only the closing price each day
SPX_price$Date<-as.Date(SPX_price$Date, format = "%m/%d/%y")# converting the date column
SPX_price<-na.locf(SPX_price, fromLast = FALSE)
SPX_return <- SPX_price %>%
arrange(Date) %>% # Make sure the data is sorted by date in ascending order
mutate(Daily_Return = log(Close) - log(lag(Close)))
days_in_year <- 252
# Calculate rolling 3-year average return
SPX_return$Rolling_3Y_Avg_Return <- rollapply(SPX_return$Daily_Return,
width = 3 * days_in_year,
FUN = mean,
by.column = TRUE,
fill = NA,
align = 'right')
SPX_return$abnormal_returns<-SPX_return$Daily_Return-SPX_return$Rolling_3Y_Avg_Return
SPX_return$lagged_return<- lag(SPX_return$Daily_Return)
SPX_return<- SPX_return %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
SPX_return<- SPX_return[SPX_return$Date %in% FilterDates,]
######################################## SURPRISES ###########################
IR_Lead <- read.csv("./DFF.csv")
IR_Lead$Date <- as.Date(IR_Lead$DATE, format = "%Y-%m-%d") # converting the date column
IR_Lead$DFF<- lead(IR_Lead$DFF)
IR_Lead<- IR_Lead %>%
mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by="day"))
IR_Lead <-na.locf(IR_Lead, fromLast = FALSE)
IR_Lead <- IR_Lead[IR_Lead$Date %in% FilterDates,][,-1]
IR_Surprises<- IR_Lead$DFF-Fed_Futures$FORWARD
######################################################################################
########################### CONSTRUCTION OF CORE DATASET FOR REGRESSIONS #############
######################################################################################
Core$return <- SPX_return$Daily_Return
Core$lagged_return <- as.numeric(SPX_return$lagged_return)
Core$abnormal_return <- as.numeric(SPX_return$abnormal_returns)
Core$IR<- IR_Lead$DFF
Core$Surprise<-IR_Surprises
Core$debt_equity<- SPX_DE$Net_Debt_Share
simple_tone <- lm(abnormal_return ~ Tone, Data = Core)
Core$Tone
Core$abnormal_return
simple_tone <- lm(abnormal_return ~ Tone, data = Core)
simple_unc <- lm(abnormal_return ~ Unc, data = Core)
simple_con <- lm(abnormal_return ~ Con, data = Core)
stargazer(simple_tone, simple_con, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
stargazer(simple_tone, simple_con, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = F)
library(readxl)
library(tidyr)
library(zoo)
library(dplyr)
library(stargazer)
library(lmtest)
stargazer(simple_tone, simple_con, simple_unc,
column.labels = c("Tone", "Unc", "Con"), header = FALSE)
